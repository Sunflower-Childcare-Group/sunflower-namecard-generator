// QR Code generation library - Compatible with node-qrcode API
// This implementation uses QR server API for generation

(function(global) {
    'use strict';
    
    const QRCode = {
        // Main method to generate QR code as data URL
        toDataURL: function(text, options) {
            return new Promise((resolve, reject) => {
                try {
                    options = options || {};
                    
                    // Set default options
                    const width = options.width || 256;
                    const margin = options.margin || 4;
                    const errorCorrectionLevel = options.errorCorrectionLevel || 'M';
                    const color = options.color || {};
                    const dark = color.dark || '#000000';
                    const light = color.light || '#FFFFFF';
                    
                    // Create canvas for QR code generation
                    const canvas = document.createElement('canvas');
                    const ctx = canvas.getContext('2d');
                    canvas.width = width;
                    canvas.height = width;
                    
                    // For now, use QR server API as backend
                    const encodedText = encodeURIComponent(text);
                    const apiUrl = `https://api.qrserver.com/v1/create-qr-code/?size=${width}x${width}&margin=${margin}&ecc=${errorCorrectionLevel}&data=${encodedText}`;
                    
                    const img = new Image();
                    img.crossOrigin = 'anonymous';
                    
                    img.onload = function() {
                        // Fill canvas background
                        ctx.fillStyle = light;
                        ctx.fillRect(0, 0, width, width);
                        
                        // Draw QR code
                        ctx.drawImage(img, 0, 0, width, width);
                        
                        // If colors are not default, we need to replace them
                        if (dark !== '#000000' || light !== '#FFFFFF') {
                            const imageData = ctx.getImageData(0, 0, width, width);
                            const data = imageData.data;
                            
                            for (let i = 0; i < data.length; i += 4) {
                                const r = data[i];
                                const g = data[i + 1];
                                const b = data[i + 2];
                                
                                // If pixel is black (QR code), replace with dark color
                                if (r < 128 && g < 128 && b < 128) {
                                    const darkRGB = hexToRgb(dark);
                                    data[i] = darkRGB.r;
                                    data[i + 1] = darkRGB.g;
                                    data[i + 2] = darkRGB.b;
                                }
                                // If pixel is white (background), replace with light color
                                else {
                                    const lightRGB = hexToRgb(light);
                                    data[i] = lightRGB.r;
                                    data[i + 1] = lightRGB.g;
                                    data[i + 2] = lightRGB.b;
                                }
                            }
                            
                            ctx.putImageData(imageData, 0, 0);
                        }
                        
                        // Convert to data URL
                        const dataURL = canvas.toDataURL('image/png');
                        resolve(dataURL);
                    };
                    
                    img.onerror = function() {
                        reject(new Error('Failed to load QR code from server'));
                    };
                    
                    img.src = apiUrl;
                    
                } catch (error) {
                    reject(error);
                }
            });
        },
        
        // Canvas method for compatibility
        toCanvas: function(canvas, text, options) {
            return this.toDataURL(text, options).then(dataURL => {
                return new Promise((resolve, reject) => {
                    const img = new Image();
                    img.onload = () => {
                        const ctx = canvas.getContext('2d');
                        canvas.width = img.width;
                        canvas.height = img.height;
                        ctx.drawImage(img, 0, 0);
                        resolve(canvas);
                    };
                    img.onerror = reject;
                    img.src = dataURL;
                });
            });
        }
    };
    
    // Helper function to convert hex color to RGB
    function hexToRgb(hex) {
        const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
        return result ? {
            r: parseInt(result[1], 16),
            g: parseInt(result[2], 16),
            b: parseInt(result[3], 16)
        } : {r: 0, g: 0, b: 0};
    }
    
    // Export for different environments
    if (typeof module !== 'undefined' && module.exports) {
        module.exports = QRCode;
    } else if (typeof define === 'function' && define.amd) {
        define([], function() { return QRCode; });
    } else {
        global.QRCode = QRCode;
    }
    
})(typeof window !== 'undefined' ? window : this);